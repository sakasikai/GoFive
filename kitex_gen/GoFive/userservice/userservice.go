// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	gofive "github.com/sakasikai/GoFive/kitex_gen/GoFive"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*gofive.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":      kitex.NewMethodInfo(createUserHandler, newUserServiceCreateUserArgs, newUserServiceCreateUserResult, false),
		"QueryUserByID":   kitex.NewMethodInfo(queryUserByIDHandler, newUserServiceQueryUserByIDArgs, newUserServiceQueryUserByIDResult, false),
		"QueryUserByName": kitex.NewMethodInfo(queryUserByNameHandler, newUserServiceQueryUserByNameArgs, newUserServiceQueryUserByNameResult, false),
		"CheckUser":       kitex.NewMethodInfo(checkUserHandler, newUserServiceCheckUserArgs, newUserServiceCheckUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "gofive",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gofive.UserServiceCreateUserArgs)
	realResult := result.(*gofive.UserServiceCreateUserResult)
	success, err := handler.(gofive.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return gofive.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return gofive.NewUserServiceCreateUserResult()
}

func queryUserByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gofive.UserServiceQueryUserByIDArgs)
	realResult := result.(*gofive.UserServiceQueryUserByIDResult)
	success, err := handler.(gofive.UserService).QueryUserByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryUserByIDArgs() interface{} {
	return gofive.NewUserServiceQueryUserByIDArgs()
}

func newUserServiceQueryUserByIDResult() interface{} {
	return gofive.NewUserServiceQueryUserByIDResult()
}

func queryUserByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gofive.UserServiceQueryUserByNameArgs)
	realResult := result.(*gofive.UserServiceQueryUserByNameResult)
	success, err := handler.(gofive.UserService).QueryUserByName(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryUserByNameArgs() interface{} {
	return gofive.NewUserServiceQueryUserByNameArgs()
}

func newUserServiceQueryUserByNameResult() interface{} {
	return gofive.NewUserServiceQueryUserByNameResult()
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gofive.UserServiceCheckUserArgs)
	realResult := result.(*gofive.UserServiceCheckUserResult)
	success, err := handler.(gofive.UserService).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCheckUserArgs() interface{} {
	return gofive.NewUserServiceCheckUserArgs()
}

func newUserServiceCheckUserResult() interface{} {
	return gofive.NewUserServiceCheckUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *gofive.CreateUserRequest) (r *gofive.CreateUserResponse, err error) {
	var _args gofive.UserServiceCreateUserArgs
	_args.Req = req
	var _result gofive.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserByID(ctx context.Context, req *gofive.QueryUserByIDRequest) (r *gofive.QueryUserResponse, err error) {
	var _args gofive.UserServiceQueryUserByIDArgs
	_args.Req = req
	var _result gofive.UserServiceQueryUserByIDResult
	if err = p.c.Call(ctx, "QueryUserByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserByName(ctx context.Context, req *gofive.QueryUserByNameRequest) (r *gofive.QueryUserResponse, err error) {
	var _args gofive.UserServiceQueryUserByNameArgs
	_args.Req = req
	var _result gofive.UserServiceQueryUserByNameResult
	if err = p.c.Call(ctx, "QueryUserByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, req *gofive.CheckUserRequest) (r *gofive.CheckUserResponse, err error) {
	var _args gofive.UserServiceCheckUserArgs
	_args.Req = req
	var _result gofive.UserServiceCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
